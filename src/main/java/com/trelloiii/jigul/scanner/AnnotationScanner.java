package com.trelloiii.jigul.scanner;

import com.trelloiii.jigul.ioc.AutoGenerated;
import com.trelloiii.jigul.ioc.Bean;
import com.trelloiii.jigul.web.Controller;
import com.trelloiii.jigul.ioc.Injectable;
import com.trelloiii.jigul.web.mvc.MVCC;
import com.trelloiii.jigul.web.mvc.MvcController;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;

public class AnnotationScanner {


    public AnnotationScanner() {
    }

    public List<Class<?>> scanAutoGenerated(List<Class<?>> classes){
        List<Class<?>> autoGeneratedClasses=new ArrayList<>();
//        List<Field> injectableFields=new ArrayList<>();
//        Map<List<Class<?>>,List<Field>> classAndFields=new HashMap<>();
        for(Class clazz:classes){
            Annotation[] annotations=clazz.getAnnotations();

            for(Annotation annotation:annotations){
                if(annotation instanceof AutoGenerated){
                    System.out.println("AG");
                    autoGeneratedClasses.add(clazz);
                }
            }
           // injectableFields.addAll(scanInjectable(clazz));
        }
        //classAndFields.put(autoGeneratedClasses,injectableFields);
        return autoGeneratedClasses;
    }
    public List<Method> scanBean(Class<?> configurationClass){
        Method[] methods=configurationClass.getDeclaredMethods();
        List<Method> resMethods=new ArrayList<>();
        for(Method method:methods){
            Annotation[] annotations1=method.getAnnotations();
            for(Annotation annotation:annotations1){
                if(annotation instanceof Bean){
                    resMethods.add(method);
                    break;
                }
            }
        }
        return resMethods;
    }
    public List<Class<?>> scanControllers(List<Class<?>> classes){
        List<Class<?>> controllerClasses=new ArrayList<>();
        for(Class clazz:classes){
            Annotation[] annotations=clazz.getAnnotations();

            for(Annotation annotation:annotations){
                if(annotation instanceof Controller){
                    System.out.println("Controller");
                    controllerClasses.add(clazz);
                }
            }
        }
        return controllerClasses;
    }

    public List<Class<? extends MvcController>> scanMvcControllers(List<Class<?>> classes){
        List<Class<? extends MvcController>> controllerClasses=new ArrayList<>();
        for(Class<?> clazz:classes){
            Annotation[] annotations=clazz.getAnnotations();

            for(Annotation annotation:annotations){
                if(annotation instanceof MVCC){
                    System.out.println("MVCC");
                    controllerClasses.add((Class<? extends MvcController>) clazz);
                }
            }
        }
        return controllerClasses;
    }

    @Deprecated
    private List<Field> scanInjectable(Class clazz){
        List<Field> injectableFields=new ArrayList<>();
            Field[] fields=clazz.getDeclaredFields();
            for(Field field:fields){
                System.out.println(field.getDeclaringClass()+"/");
                Annotation[] annotations=field.getAnnotations();
                for (Annotation annotation:annotations){
                    if(annotation instanceof Injectable)
                        injectableFields.add(field);
                }
            }
        return injectableFields;
    }


}
