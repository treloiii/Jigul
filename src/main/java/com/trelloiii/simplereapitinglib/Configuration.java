package com.trelloiii.simplereapitinglib;

import com.trelloiii.simplereapitinglib.ioc.instance.ObjectInstance;
import com.trelloiii.simplereapitinglib.scanner.AnnotationScanner;
import com.trelloiii.simplereapitinglib.scanner.ClassScanner;
import com.trelloiii.simplereapitinglib.web.ControllerBuilder;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

public class Configuration {

    private String[] IoCPackages;
    private String[] webPackages;
    private ObjectInstance objectInstance;
    private ControllerBuilder controllerBuilder;
    private static Configuration configuration;
    private Configuration(String[] IoCPackages,String[] webPackages) {
        this.IoCPackages = IoCPackages;
        this.webPackages=webPackages;
        this.objectsPoolBuilder();
        this.controllersBuilder();
    }
    public static Configuration build(String [] packages,String[] webPackages){
        if(configuration==null){
            configuration=new Configuration(packages,webPackages);
        }
        return configuration;
    }
    public static Configuration getConfiguration() throws InstantiationException {
        if(configuration==null)
            throw new InstantiationException("There is no setup configuration in your project, cannot instance null config");
        else
            return configuration;
    }

    public ObjectInstance getObjectInstance() {
        return objectInstance;
    }

    public ControllerBuilder getControllerBuilder() {
        return controllerBuilder;
    }

    private void objectsPoolBuilder(){
        ClassScanner scanner=ClassScanner.createScanner();
        AnnotationScanner annotationScanner=new AnnotationScanner();
        List<Class<?>> classes= new ArrayList<>();
        List<Field> fields=new ArrayList<>();
        for(String pkg: IoCPackages){
            try {
                classes.addAll(annotationScanner.scanAutoGenerated(scanner.scan(pkg)));
                //Map<List<Class<?>>,List<Field>> classAndFields=annotationScanner.scanAutoGenerated(scanner.scan(pkg));
//                for(Map.Entry<List<Class<?>>,List<Field>> entry:classAndFields.entrySet()){
//                    classes.addAll(entry.getKey());
//                    fields.addAll(entry.getValue());
//                }

            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }

        this.objectInstance=ObjectInstance.builder(classes);
    }
    private void controllersBuilder(){
        ClassScanner scanner=ClassScanner.createScanner();
        AnnotationScanner annotationScanner=new AnnotationScanner();
        List<Class<?>> classes=new ArrayList<>();
        List<Method> methods=new ArrayList<>();
        for(String pkg:webPackages){
            try{
                classes.addAll(annotationScanner.scanControllers(scanner.scan(pkg)));
            }
            catch (Exception e){
                e.printStackTrace();
            }
        }
        this.controllerBuilder=ControllerBuilder.builder(classes);
    }

    @Deprecated
    private Object getPooledObject(Class clazz){
        return objectInstance.getInstance(clazz);
    }
}
